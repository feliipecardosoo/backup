package main

import (
	"backup-etl/src/config/database" // pacotes internos para conex√£o com MongoDB
	"backup-etl/src/exec/input"      // l√≥gica para leitura do banco de input
	"backup-etl/src/exec/output"     // l√≥gica para escrita no banco de backup
	"context"
	"log"
	"os"
	"time"
)

func main() {
	// Carrega vari√°veis do arquivo .env para o ambiente
	//env.LoadEnv()

	// Contexto global usado em todas as opera√ß√µes MongoDB
	ctx := context.Background()

	// -----------------------------
	// Conex√£o com o Mongo de input
	// -----------------------------
	// L√™ a URI do MongoDB de input a partir das vari√°veis de ambiente
	bancoInicial := os.Getenv("BANCO_INICIAL")
	if bancoInicial == "" {
		log.Fatal("‚ùå BANCO_INICIAL n√£o configurado")
	}

	// Cria e conecta a inst√¢ncia do MongoConnection para input
	connInput := database.NewMongoConnection()
	if err := connInput.Connect(bancoInicial); err != nil {
		log.Fatal(err)
	}
	// Garante que a conex√£o ser√° encerrada ao final da execu√ß√£o
	defer connInput.Disconnect(ctx)

	// Cria o reposit√≥rio de queries para input
	qInput := input.New(connInput)

	// -----------------------------
	// Pega os usu√°rios do dia
	// -----------------------------
	users, err := qInput.GetUsersHoje(ctx)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("üëÄ Encontrados %d usu√°rios no banco de input.", len(users))

	// Marca o in√≠cio do processamento de backup
	start := time.Now()

	// -----------------------------
	// Conex√£o com o Mongo de output (backup)
	// -----------------------------
	connOutput := database.NewMongoConnection()
	if err := connOutput.Connect(os.Getenv("BANCO_BACKUP")); err != nil {
		log.Fatal(err)
	}
	defer connOutput.Disconnect(ctx)

	// Cria o reposit√≥rio de queries para output
	qOutput := output.New(connOutput)

	// -----------------------------
	// Deleta usu√°rios existentes no backup
	// -----------------------------
	// Garante que n√£o haver√° duplicados pelo campo "name" antes de inserir
	deleted, err := qOutput.DeleteExistingUsers(ctx, users)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("üóëÔ∏è %d usu√°rios antigos removidos do backup.", deleted)

	// -----------------------------
	// Insere os usu√°rios novos
	// -----------------------------
	if err := qOutput.InsertUsersToday(ctx, users); err != nil {
		log.Fatal(err)
	}

	// Calcula e exibe o tempo total gasto em todo o processo
	elapsed := time.Since(start)
	log.Printf("‚è±Ô∏è Tempo total para executar o script: %s", elapsed)
}
